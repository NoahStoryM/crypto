#lang racket/base
(require rackunit
         racket/match
         racket/file
         racket/port
         racket/class
         racket/system
         crypto
         crypto/libcrypto
         crypto/util/age
         (submod crypto/util/age private-for-testing))

(crypto-factories libcrypto-factory)

(define sk1 (generate-private-key 'ecx '((curve x25519))))
(define sk2 (generate-private-key 'ecx '((curve x25519))))
(define pk1 (pk-key->public-only-key sk1))
(define pk2 (pk-key->public-only-key sk2))
(define pass #"wakawaka")

(define msg #"When you come to a fork in the road, take it.")

(define enc1 (age-encrypt (list pk1) msg))
(define enc2 (age-encrypt (list pk2) msg))
(define enc12 (age-encrypt (list pk1 pk2) msg))
(define encp (age-encrypt (list `(scrypt ,pass)) msg))

(check-equal? (age-decrypt (list sk1) enc1) msg)
(check-equal? (age-decrypt (list sk2) enc2) msg)
(check-equal? (age-decrypt (list sk1 sk2) enc1) msg)
(check-equal? (age-decrypt (list sk1) enc12) msg)
(check-exn #rx"age-decrypt: no identity matched"
           (lambda () (age-decrypt (list sk1) enc2)))
(check-exn #rx"age-decrypt: no identity matched"
           (lambda () (age-decrypt (list `(scrypt ,pass)) enc12)))

(check-equal? (age-decrypt (list `(scrypt ,pass)) encp) msg)

(check-exn #rx"age-encrypt: scrypt recipient "
           (lambda () (age-encrypt (list sk1 `(scrypt ,pass)) msg)))
(check-exn #rx"age-encrypt: scrypt recipient "
           (lambda () (age-encrypt (list `(scrypt ,pass) `(scrypt #"other")) msg)))

;; ----------------------------------------
;; Fixed key generated by age-keygen:

(define skastr "AGE-SECRET-KEY-1NENQKDH6A5HPG5ZNVE9YYD9XY57UHKDNRTRGM0PY4KEKRFDJ22RQSVGXJ2")
(define pkastr "age1qpjdzg0gss09w7ddsrjy43zlqxs7avr4gxegzd7tgrts3fngry2smsmrwe")

;; $ echo -n fork in the road | /opt/r/age/age --encrypt -r $pkastr
(define enca
  #"age-encryption.org/v1\n-> X25519 Pey5gFv/w6UEFs5tNDAcNX1O7THABKZKNjdFmTGCrEI\nWIRv6dMu/JCukaH07nsNsJoXtGSON4q2XT5S8Rbado0\n--- hOlj4iNBnFSWIeCZ3mM2RD59APU+iCFpQjXCNWR+rWw\n\325\263\3416\310g\340\231\264\\\254\311\330\312\203i\370}\271c\273C@>\267\364qB\260+\216|\262\273\35\215\355\2710\232\255m\366?:m\211z")

(define ska (datum->pk-key skastr 'age/v1-private))
(define pka (datum->pk-key pkastr 'age/v1-public))

(check-equal? (age-decrypt (list ska) enca) #"fork in the road")

;; ----------------------------------------
;; Compatibility with age and age-keygen:

(define age-keygen-exe (find-executable-path "age-keygen"))
(define age-exe (find-executable-path "age"))
(unless age-exe (printf "Cannot find `age` executable. Skipping compat tests.\n"))

(define-values (pks3 sks3 pk3 sk3)
  (cond [age-keygen-exe
         (define keygen-err (open-output-bytes))
         (define keygen-out (with-output-to-string
                              (lambda ()
                                ;; Apparently age-keygen prints public key to
                                ;; stderr if stdout is not terminal.
                                (parameterize ((current-error-port keygen-err))
                                  (system* age-keygen-exe)))))
         (define keygen-out-rx
           #rx"^# created: [^\n]*\n# public key: (age1[a-z0-9]+)\n(AGE-SECRET-KEY-1[A-Z0-9]+)\n")
         (match (regexp-match keygen-out-rx keygen-out)
           [(list _ pks sks)
            (define pk (datum->pk-key pks 'age/v1-public))
            (define sk (datum->pk-key sks 'age/v1-private))
            (values pks sks pk sk)]
           [_ (error 'keygen "can't parse keygen output\n  out: ~s\n  err: ~s"
                     keygen-out (get-output-string keygen-err))])]
        [else
         (values (pk-key->datum pk1 'age/v1-public) (pk-key->datum sk1 'age/v1-private) pk1 sk1)]))

(when age-exe
  (define enc3
    (with-output-to-bytes
      (lambda ()
        (parameterize ((current-input-port (open-input-bytes msg)))
          (system* age-exe "--encrypt" "--recipient" pks3)))))
  (check-equal? (age-decrypt (list sk3) enc3) msg))

(when age-exe
  (define enc3 (age-encrypt (list pk3) msg))
  (define ident-file (make-temporary-file))
  (with-output-to-file ident-file #:exists 'append
    (lambda ()
      (printf "# temp secret key generated by Racket crypto/tests/age\n")
      (printf "~a\n" sks3)))
  (check-equal? (with-output-to-bytes
                  (lambda ()
                    (parameterize ((current-input-port (open-input-bytes enc3)))
                      (system* age-exe "--decrypt" "--identity" ident-file))))
                msg)
  (delete-file ident-file))

;; ------------------------------------------------------------
;; Reject low scrypt work factors

(let ([low-work-age (new age% (scrypt-ln 3))])

  (define enc
    (let ([out (open-output-bytes)])
      (send low-work-age age-encrypt (list `(scrypt ,pass)) (open-input-bytes msg) out)
      (get-output-bytes out)))

  (check-exn #rx"age-decrypt: bad scrypt stanza.*work factor"
             (lambda () (age-decrypt (list `(scrypt ,pass)) enc))))

;; ------------------------------------------------------------
;; Error if no impls

(check-exn #rx"age-maker: no [a-z]* implementation found"
           (lambda ()
             (parameterize ((crypto-factories null))
               (new age% (init-who 'age-maker)))))

(check-exn #rx"age-encrypt: no [a-z]* implementation found"
           (lambda ()
             (parameterize ((crypto-factories null))
               (age-encrypt (list pk1) msg))))
